import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import BOT_TOKEN, ADMIN_ID
from database import init_db, add_full_request, delete_request_by_id, get_admin_message_id

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
def get_nav_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")],
        [KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")]
    ], resize_keyboard=True)

def get_final_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")]
    ], resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class RequestForm(StatesGroup):
    name = State()
    contact = State()
    bot_name = State()
    purpose = State()
    functions = State()
    admin_panel = State()
    buttons = State()
    data_storage = State()
    notifications = State()
    payment = State()
    business_info = State()
    urgency = State()
    other = State()

questions = [
    ("name", "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"),
    ("contact", "–£–¥–æ–±–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, –ø–æ—á—Ç–∞ –∏–ª–∏ @–Ω–∏–∫ –≤ Telegram):"),
    ("bot_name", "–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–ª—è –±–æ—Ç–∞?"),
    ("purpose", "–î–ª—è —á–µ–≥–æ –≤–∞–º –Ω—É–∂–µ–Ω –±–æ—Ç? –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å."),
    ("functions", "–ß—Ç–æ –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –¥–µ–ª–∞—Ç—å –±–æ—Ç?"),
    ("admin_panel", "–ù—É–∂–Ω–∞ –ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å? –ß—Ç–æ –≤ –Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å?"),
    ("buttons", "–ö–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É –±–æ—Ç–∞?"),
    ("data_storage", "–î–æ–ª–∂–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞—è–≤–∫–∏, —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤)?"),
    ("notifications", "–ö–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç –∏ –∫–æ–º—É?"),
    ("payment", "–ù—É–∂–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –≤ Telegram? –í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ?"),
    ("business_info", "–ï—Å–ª–∏ –±–æ—Ç —Å–≤—è–∑–∞–Ω —Å –±–∏–∑–Ω–µ—Å–æ–º, —É–∫–∞–∂–∏—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∏—à—É, —Å—Å—ã–ª–∫–∏."),
    ("urgency", "–ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞?"),
    ("other", "–ï—Å—Ç—å –ª–∏ –µ—â—ë –ø–æ–∂–µ–ª–∞–Ω–∏—è?")
]

state_order = [RequestForm.name, RequestForm.contact, RequestForm.bot_name, RequestForm.purpose,
               RequestForm.functions, RequestForm.admin_panel, RequestForm.buttons,
               RequestForm.data_storage, RequestForm.notifications, RequestForm.payment,
               RequestForm.business_info, RequestForm.urgency, RequestForm.other]

@dp.message(CommandStart())
@dp.message(F.text == "üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –¢–ó –Ω–∞ Telegram-–±–æ—Ç–∞.\n\n" + questions[0][1],
                         reply_markup=get_nav_keyboard())
    await state.set_state(state_order[0])

@dp.message(F.text == "üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
async def restart(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n" + questions[0][1],
                         reply_markup=get_nav_keyboard())
    await state.set_state(state_order[0])

@dp.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    current = await state.get_state()
    if current in [s.state for s in state_order]:
        idx = [s.state for s in state_order].index(current)
        if idx > 0:
            await state.set_state(state_order[idx - 1])
            await message.answer(questions[idx - 1][1], reply_markup=get_nav_keyboard())
        else:
            await message.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ.", reply_markup=get_nav_keyboard())
    else:
        await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.")

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
async def cancel_order(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:")
    await state.clear()
    await state.set_state("awaiting_cancel_id")

@dp.message(F.text)
async def handle_question(message: Message, state: FSMContext):
    current = await state.get_state()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ ID
    if current == "awaiting_cancel_id":
        try:
            request_id = int(message.text.strip())
            admin_msg_id = get_admin_message_id(request_id)
            deleted = delete_request_by_id(request_id)
            if deleted:
                if admin_msg_id:
                    try:
                        await bot.delete_message(chat_id=ADMIN_ID, message_id=admin_msg_id)
                    except Exception:
                        pass
                await bot.send_message(ADMIN_ID, f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É #{request_id}.")
                await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_final_keyboard())
            else:
                await message.answer(
                    f"‚ùå –ó–∞—è–≤–∫–∞ —Å ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞.",
                    reply_markup=get_final_keyboard()
                )
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ–º).", reply_markup=get_final_keyboard())
        await state.clear()
        return

    if current not in [s.state for s in state_order]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    idx = [s.state for s in state_order].index(current)
    key = questions[idx][0]
    await state.update_data({key: message.text})

    if idx + 1 < len(state_order):
        await state.set_state(state_order[idx + 1])
        await message.answer(questions[idx + 1][1], reply_markup=get_nav_keyboard())
    else:
        data = await state.get_data()

        user = message.from_user
        user_info = f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user.full_name}"
        if user.username:
            user_info += f" (@{user.username})"
        user_info += f"\nüÜî ID: {user.id}"

        text = (
            f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–æ—Ç–∞:\n\n"
            f"{user_info}\n\n"
            f"–ò–º—è: {data['name']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
            f"ü§ñ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['bot_name']}\n"
            f"üéØ –¶–µ–ª—å: {data['purpose']}\n"
            f"‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏: {data['functions']}\n"
            f"üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {data['admin_panel']}\n"
            f"üìã –ö–Ω–æ–ø–∫–∏: {data['buttons']}\n"
            f"üíæ –î–∞–Ω–Ω—ã–µ: {data['data_storage']}\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data['notifications']}\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞: {data['payment']}\n"
            f"üè¢ –ë–∏–∑–Ω–µ—Å: {data['business_info']}\n"
            f"‚è± –°—Ä–æ—á–Ω–æ—Å—Ç—å: {data['urgency']}\n"
            f"üìù –î—Ä—É–≥–æ–µ: {data['other']}"
        )

        admin_message = await bot.send_message(ADMIN_ID, text)
        request_id = add_full_request(**data, admin_message_id=admin_message.message_id)

        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!\n\nüìå ID –∑–∞—è–≤–∫–∏: {request_id}",
            reply_markup=get_final_keyboard()
        )
        await state.clear()

async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

